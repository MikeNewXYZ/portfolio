---
interface Props {
	outerClasses?: string;
	innerClasses?: string;
	multiplier?: number;
	perspective?: string;
	transitionDuration?: string;
	hoverScale?: string;
}
const {
	outerClasses = "",
	innerClasses = "",
	multiplier = 10,
	perspective = "1000px",
	transitionDuration = "0.2s",
	hoverScale = "1.05",
	...rest
} = Astro.props;
---

<floating-card
	class:list={[outerClasses]}
	multiplier={multiplier}
	perspective={perspective}
	transition-duration={transitionDuration}
	hover-scale={hoverScale}
	{...rest}
>
	<div class:list={[innerClasses]}>
		<slot />
	</div>
</floating-card>

<script>
	class FloatingCard extends HTMLElement {
		innerElement: HTMLDivElement;
		multiplier: number;
		perspective: string;
		transitionDuration: string;
		hoverScale: string;
		dimensions: { top: number; left: number; halfHeight: number; halfWidth: number };

		constructor() {
			super();
			this.innerElement = this.children[0] as HTMLDivElement;
			this.multiplier = parseInt(this.getAttribute("multiplier")!);
			this.perspective = this.getAttribute("perspective")!;
			this.transitionDuration = this.getAttribute("transition-duration")!;
			this.hoverScale = this.getAttribute("hover-scale")!;
			this.dimensions = { top: 0, left: 0, halfHeight: 0, halfWidth: 0 };

			this.animateCard = this.animateCard.bind(this);
			this.resetCard = this.resetCard.bind(this);
			this.updateDimensions = this.updateDimensions.bind(this);
		}

		connectedCallback() {
			this.updateDimensions();

			Object.assign(this.style, {
				display: "block",
				perspective: this.perspective,
				transformStyle: "preserve-3d",
			});
			Object.assign(this.innerElement.style, {
				transition: `transform ${this.transitionDuration}`,
			});

			this.innerElement.addEventListener("mousemove", this.animateCard);
			this.innerElement.addEventListener("mouseout", this.resetCard);
			window.addEventListener("resize", this.updateDimensions);
			window.addEventListener("scroll", this.updateDimensions);
		}

		disconnectedCallback() {
			this.innerElement.removeEventListener("mousemove", this.animateCard);
			this.innerElement.removeEventListener("mouseout", this.resetCard);
			window.removeEventListener("resize", this.updateDimensions);
			window.removeEventListener("scroll", this.updateDimensions);
		}

		updateDimensions() {
			const { top, left, height, width } = this.innerElement.getBoundingClientRect();
			this.dimensions = {
				top,
				left,
				halfHeight: height / 2,
				halfWidth: width / 2,
			};
		}

		animateCard(event: MouseEvent) {
			requestAnimationFrame(() => {
				const { top, left, halfHeight, halfWidth } = this.dimensions;
				const mouseY = event.clientY - top;
				const mouseX = event.clientX - left;
				const rotateY = -((mouseX - halfWidth) / halfWidth);
				const rotateX = (mouseY - halfHeight) / halfHeight;

				Object.assign(this.innerElement.style, {
					transform: `
            rotateX(${rotateX * this.multiplier}deg)
            rotateY(${rotateY * this.multiplier}deg)
            scale(${this.hoverScale})
          `,
				});
			});
		}

		resetCard() {
			requestAnimationFrame(() => {
				Object.assign(this.innerElement.style, {
					transform: `
            rotateX(0deg)
            rotateY(0deg)
            scale(1)
          `,
				});
			});
		}
	}

	customElements.define("floating-card", FloatingCard);
</script>
